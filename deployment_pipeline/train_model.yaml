name: Train model
inputs:
- {name: x_train, type: String}
- {name: y_train, type: String}
- {name: n_estimators, type: Integer}
- {name: n_jobs, type: Integer}
- {name: max_depth, type: Integer}
- {name: random_state, type: Integer}
outputs:
- {name: model, type: String}
implementation:
  container:
    image: python:3.9.7
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'pandas==1.5.2' 'xgboost==1.7.2' 'scikit-learn==1.2.0' || PIP_DISABLE_PIP_VERSION_CHECK=1
      python3 -m pip install --quiet --no-warn-script-location 'pandas==1.5.2' 'xgboost==1.7.2'
      'scikit-learn==1.2.0' --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      def train_model(
              x_train_path,
              y_train_path,
              n_estimators,
              n_jobs,
              max_depth,
              random_state,
              model_path):
          import xgboost as xgb
          import pandas as pd

          X_train = pd.read_csv(x_train_path, index_col=0)
          y_train = pd.read_csv(y_train_path, index_col=0)

          xgb_reg = xgb.XGBRegressor(n_estimators=n_estimators, n_jobs=n_jobs, max_depth=max_depth, random_state=random_state)
          xgb_reg.fit(X_train.astype(float), y_train)
          xgb_reg.save_model(model_path)

      import argparse
      _parser = argparse.ArgumentParser(prog='Train model', description='')
      _parser.add_argument("--x-train", dest="x_train_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--y-train", dest="y_train_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--n-estimators", dest="n_estimators", type=int, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--n-jobs", dest="n_jobs", type=int, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--max-depth", dest="max_depth", type=int, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--random-state", dest="random_state", type=int, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--model", dest="model_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = train_model(**_parsed_args)
    args:
    - --x-train
    - {inputPath: x_train}
    - --y-train
    - {inputPath: y_train}
    - --n-estimators
    - {inputValue: n_estimators}
    - --n-jobs
    - {inputValue: n_jobs}
    - --max-depth
    - {inputValue: max_depth}
    - --random-state
    - {inputValue: random_state}
    - --model
    - {outputPath: model}
